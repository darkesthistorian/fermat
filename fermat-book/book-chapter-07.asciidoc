:numbered!:
image::https://raw.githubusercontent.com/bitDubai/media-kit/master/MediaKit/Fermat%20Branding/Fermat%20Logotype/Fermat_Logo_3D.png[FermatLogo]

[[layersExplanation]]
== Chapter 7: Fermat layers explanation

The *_multilayer architecture_* becomes useful when grouping the Plug-ins according to their common functionalities. This gives , on one hand, a certain order and structure to the system and lets it identify common challenges to solve when writing code. On the other hand, the conceptual strength of using _layers_ stimulate the creation of future Plug-ins that are revealed as necessary when decomposing a big task in smaller steps to solve and implement. Furthermore, Plug-ins that are originally conceived to serve a certain function, afterwards appear to be reusable for new developments beyond their initial purpose. +
We have already explored in the previous chapters the main role of the *Core Platform* to deploy the whole system structure, and the first services available provided by the system-wide *_superlayers_* . +
Now, let us explore the next *_layers_* following on top, which are almost present in every *_Fermat platform_* that follows. +
*Layers* are built with a considerable atomicity in its components (i.e. each component deals with a very specific and constrained set of events) what really renders the whole Fermat system with a strong, structured and solid foundation and at the same time a large flexibility and adaptability for further development and evolution. +

:numbered: [start=5]

=== _Platform Services layer_
The modules in this layer handle the very basic tasks that allow Plug-ins to interact safely in an uncontrolled environment, taking care of a careful transmission of responsibility from one component to another and specially the management of exceptions and track of all the system's *events*.

////
=== _Hardware layer_
As Fermat runs distributed in different devices, this layer has the necessary modules to identify each of the user’s devices _independently_ that are logged in, and also to provide all the device's information that is needed for the system to run.+

=== _Users layer_
Fermat is a multi-user and multi-device system. Therefore, depending on how the user interacts with Fermat, users are divided into certain _users categories_ which allows the user's activity to be properly handle within Fermat. +
=== _Plug-in layer_
=== _License layer_
Fermat system ensures a _micro-license_ system to let the developer of a certain plug-in or certain wallet or any other module to charge a *fee* for the use of the component, and the revenue is enforced programmatically by Fermat to reach the license owner.    
Plug-in :: +
////

=== _Network Service layer_
Each time that a certain system function has to perform any operation *outside* the device where Fermat is running, a _network service_ is required to follow the execution in other devices until it is completed. +
Network services' modules need to have a *communication channel* established and maintained between the parties involved; This is done by the *Fermat network*  +
Each *network service module* running on a _local device_ establishes communication EXCLUSIVELY to its _counterpart_ running in the _remote device_. +
The module handles a table of requests and responses to communicate with the counterpart and to perform the required task. +

=== _Actor Network Service layer_
This layer provides specific *network services* to interconnect the *actor’s identity* of a specific Fermat platform to the *user identity* on which it depends. + 

=== _Identity layer_
Plug-ins in this layer manage the necessary information about the end user's *identity* within Fermat. Every *identity* in Fermat is a pair of private/public keys that act like a credential to access certain specific functionalities of the *owner’s identity* i.e. it allows the *end user* to have access to his own *wallets*. +

=== _World layer_
In this layer the components consult certain specific information from the world "outside" of Fermat, usually checking indexes on web-pages, or gathering any kind of information offered in the web, to make this available to Fermat Plug-ins to consume the collected data.

=== _Wallet layer_
The components in this layer do all the *accountancy operations* related to the wallets.

=== _Transaction layers_
[horizontal]
Transaction :: a transaction is basically any operation that includes *money*. 

A transaction is dependent on the _atomicity_ of the changes of status in the operations involved, so each _transaction Plug-in_ should acknowledge whether the operation was successfully ACCEPTED or on the contrary, REFUSED.
Each Plug-in deals with a certain _transaction type_ defined by different criteria, mostly of time, according to the *actors* involved and the *direction* (incoming / outgoing). +
In Fermat the *transport of value* goes on a parallel path to the *transport of information (meta-data)* of a transaction, so both transports are managed by the _transaction Plug-ins_.

:numbered!:
==== _Digital Money Transaction layer_
This type of transaction layer deals with *digital money transaction*

==== _Cash Money Transaction layer_
This type of transaction layer deals with *cash money transaction*

==== _Money Transaction layer_
This type of transaction layer deals with *digital money transaction*

:numbered:
=== _Business Transaction layers_
More complex Plug-ins that deal with multiple transactions that occur at the same time to reflect a desired *business transaction* 

=== _Request layer_
Plug-ins in this layer gather the different _requests_ than have been triggered in the system and deliver them to the appropriated Plug-in to manage and complete the request.

=== _Middleware layer_
Every Plug-in that covers any other functionality required and that is not included in the other layers.

[[actorLayer]]
=== _Actor layer_
This is the layer where the business logic of a specific *actor* is defined. *Actor identities* are derived in a hierarchical way from the end user's *root identity*, and let him create and control how many identities he wants in order to play different roles within Fermat's platforms.

=== _Agent layer_
High level Plug-ins (near the *end user*) that by means of a certain kind of _Artificial Intelligence (AI)_ can take decisions on the *user's* behalf, to simplify the management of wallets with high abstraction levels. I.e. when the user wants to make a payment, an agent could choose where to withdraw the funds from to be more profitable financially to the user.

=== _Modules layers_
*Modules* Plug-ins in this layers act as a "general manager" of all the functionalities that a *desktop* needs, to consume from Fermat, delivering to it what is required in a transparent way (without the desktop program actually managing anything inside Fermat, but querying the _desktop module_ to get what it needs).

:numbered!:
==== _Desktop Module layer_
[horizontal]
*Desktop* :: is a sub-application (sub-program) that concentrate functionalities provided by several other sub-applications to present them in a _graphic user interface (GUI)_ in order to interact with the user. ( see <<desktopLayer>> ) +

==== _Sub App Module layer_
Similar to the _Desktop Module layer_ but applied to the _sub-applications_ that run *below* _desktops_. +
These _sub-apps_ do *NOT* manage money.

==== _Wallet Module layer_
Similar to the _sub-app module layer_ but applied to _Wallets_, i.e. "sub-apps" that *DO* manage money. +

NOTE: Until now, the _layers_ presented are written in *JAVA*. +
The next layers are NOT *code portable*, i.e. they depend on the Operating Systems where they run, and therefore are written in each specific OS language.

:numbered:
[[desktopLayer]]
=== *_Desktop layer_*
In this layer lives the part of the *desktop application* responsible of the GUI (Graphic User Interface) which has a *one-on-one* relationship to the component of the same name in the _Desktop Module Layer_

=== *_Sub-app layer_*
In this layer lives the part of the *sub-app* responsible of the GUI (Graphic User Interface) which has a *one-on-one* relationship to the component of the same name in the _Sub App Module Layer_

=== *_Reference Wallet layer_*
In this layer lives the part of the *wallet* responsible of the GUI (Graphic User Interface) which manages the *wallets resources* (multimedia) and the *wallet navigation structure*. This also has a  *one-on-one* relationship to the component of the same name in the _Wallet Module Layer_

:numbered!:
image::https://raw.githubusercontent.com/bitDubai/media-kit/master/MediaKit/Coins/Fermat%20Bitcoin/PerspView/1/Front_MedQ_1280x720.jpg[FermatCoin]
  
==== _Continue Reading ..._
link:book-chapter-08.asciidoc[Next Chapter]

link:book-chapter-06.asciidoc[Previous Chapter]




